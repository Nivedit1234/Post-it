{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nived\\\\OneDrive\\\\Desktop\\\\reddish\\\\client\\\\src\\\\components\\\\AuthForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { loginUser, signupUser } from '../reducers/userReducer';\nimport { Formik, Form } from 'formik';\nimport * as yup from 'yup';\nimport { TextInput } from './FormikMuiFields';\nimport { notify } from '../reducers/notificationReducer';\nimport AlertMessage from './AlertMessage';\nimport getErrorMsg from '../utils/getErrorMsg';\nimport { Button, Typography, Divider, InputAdornment, IconButton } from '@material-ui/core';\nimport { useAuthStyles } from '../styles/muiStyles';\nimport PersonIcon from '@material-ui/icons/Person';\nimport LockIcon from '@material-ui/icons/Lock';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nconst validationSchemaSignup = yup.object({\n  username: yup.string().required('Required').max(20, 'Must be at most 20 characters').min(3, 'Must be at least 3 characters').matches(/^[a-zA-Z0-9-_]*$/, 'Only alphanumeric characters allowed, no spaces/symbols'),\n  password: yup.string().required('Required').min(6, 'Must be at least 6 characters')\n});\nconst validationSchemaLogin = yup.object({\n  username: yup.string().required('Required'),\n  password: yup.string().required('Required')\n});\n\nconst AuthForm = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const [authType, setAuthType] = useState('login');\n  const [showPass, setShowPass] = useState(false);\n  const [error, setError] = useState(null);\n  const classes = useAuthStyles(authType)();\n\n  const handleLogin = async (values, {\n    setSubmitting\n  }) => {\n    try {\n      setSubmitting(true);\n      await dispatch(loginUser(values));\n      dispatch(notify(`Welcome, ${values.username}. You're logged in!`, 'success'));\n    } catch (err) {\n      setSubmitting(false);\n      setError(getErrorMsg(err));\n    }\n  };\n\n  const handleSignup = async (values, {\n    setSubmitting\n  }) => {\n    try {\n      setSubmitting(true);\n      await dispatch(signupUser(values));\n      dispatch(notify(`Welcome, ${values.username}. You've been successfully registered.`, 'success'));\n    } catch (err) {\n      setSubmitting(false);\n      setError(getErrorMsg(err));\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.authWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    validateOnChange: true,\n    initialValues: {\n      username: '',\n      password: ''\n    },\n    onSubmit: authType === 'login' ? handleLogin : handleSignup,\n    validationSchema: authType === 'login' ? validationSchemaLogin : validationSchemaSignup,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, ({\n    isSubmitting\n  }) => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Form, {\n    className: classes.form,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    color: \"secondary\",\n    className: classes.formTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }\n  }, authType === 'login' ? 'Login to your account' : 'Create a new account'), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.input,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(PersonIcon, {\n    className: classes.inputIcon,\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(TextInput, {\n    name: \"username\",\n    type: \"text\",\n    placeholder: \"Enter username\",\n    label: \"Username\",\n    required: true,\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.input,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(LockIcon, {\n    className: classes.inputIcon,\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(TextInput, {\n    name: \"password\",\n    type: showPass ? 'text' : 'password',\n    placeholder: \"Enter password\",\n    label: \"Password\",\n    required: true,\n    fullWidth: true,\n    InputProps: {\n      endAdornment: /*#__PURE__*/React.createElement(InputAdornment, {\n        position: \"end\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(IconButton, {\n        onClick: () => setShowPass(prevState => !prevState),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 27\n        }\n      }, showPass ? /*#__PURE__*/React.createElement(VisibilityOffIcon, {\n        color: \"primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 31\n        }\n      }) : /*#__PURE__*/React.createElement(VisibilityIcon, {\n        color: \"primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 31\n        }\n      })))\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    color: \"secondary\",\n    variant: \"contained\",\n    size: \"large\",\n    startIcon: authType === 'login' ? /*#__PURE__*/React.createElement(ExitToAppIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 44\n      }\n    }) : /*#__PURE__*/React.createElement(PersonAddIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 64\n      }\n    }),\n    className: classes.submitButton,\n    disabled: isSubmitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 17\n    }\n  }, authType === 'login' ? isSubmitting ? 'Logging In' : 'Login' : isSubmitting ? 'Signing Up' : 'Sign Up')), /*#__PURE__*/React.createElement(Divider, {\n    orientation: \"vertical\",\n    flexItem: true,\n    className: classes.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.sidePanel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    className: classes.switchText,\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 17\n    }\n  }, authType === 'login' ? `Don't have an account?` : 'Already have an account?'), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => authType === 'login' ? setAuthType('signup') : setAuthType('login'),\n    fullWidth: true,\n    size: \"large\",\n    color: \"primary\",\n    variant: \"outlined\",\n    startIcon: authType === 'login' ? /*#__PURE__*/React.createElement(PersonAddIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 44\n      }\n    }) : /*#__PURE__*/React.createElement(ExitToAppIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 64\n      }\n    }),\n    disabled: isSubmitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 17\n    }\n  }, authType === 'login' ? 'Sign Up' : 'Login'))))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(AlertMessage, {\n    error: error,\n    severity: \"error\",\n    clearError: () => setError(null),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 9\n    }\n  })));\n};\n\n_s(AuthForm, \"2ezqoC/G97p5voqrwP/nsBrYZm4=\", false, function () {\n  return [useDispatch, useAuthStyles];\n});\n\n_c = AuthForm;\nexport default AuthForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthForm\");","map":{"version":3,"sources":["C:/Users/nived/OneDrive/Desktop/reddish/client/src/components/AuthForm.js"],"names":["React","useState","useDispatch","loginUser","signupUser","Formik","Form","yup","TextInput","notify","AlertMessage","getErrorMsg","Button","Typography","Divider","InputAdornment","IconButton","useAuthStyles","PersonIcon","LockIcon","ExitToAppIcon","PersonAddIcon","VisibilityOffIcon","VisibilityIcon","validationSchemaSignup","object","username","string","required","max","min","matches","password","validationSchemaLogin","AuthForm","dispatch","authType","setAuthType","showPass","setShowPass","error","setError","classes","handleLogin","values","setSubmitting","err","handleSignup","authWrapper","isSubmitting","form","formTitle","input","inputIcon","endAdornment","prevState","submitButton","divider","sidePanel","switchText"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { loginUser, signupUser } from '../reducers/userReducer';\r\nimport { Formik, Form } from 'formik';\r\nimport * as yup from 'yup';\r\nimport { TextInput } from './FormikMuiFields';\r\nimport { notify } from '../reducers/notificationReducer';\r\nimport AlertMessage from './AlertMessage';\r\nimport getErrorMsg from '../utils/getErrorMsg';\r\n\r\nimport {\r\n  Button,\r\n  Typography,\r\n  Divider,\r\n  InputAdornment,\r\n  IconButton,\r\n} from '@material-ui/core';\r\nimport { useAuthStyles } from '../styles/muiStyles';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport LockIcon from '@material-ui/icons/Lock';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\r\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\n\r\nconst validationSchemaSignup = yup.object({\r\n  username: yup\r\n    .string()\r\n    .required('Required')\r\n    .max(20, 'Must be at most 20 characters')\r\n    .min(3, 'Must be at least 3 characters')\r\n    .matches(\r\n      /^[a-zA-Z0-9-_]*$/,\r\n      'Only alphanumeric characters allowed, no spaces/symbols'\r\n    ),\r\n\r\n  password: yup\r\n    .string()\r\n    .required('Required')\r\n    .min(6, 'Must be at least 6 characters'),\r\n});\r\n\r\nconst validationSchemaLogin = yup.object({\r\n  username: yup.string().required('Required'),\r\n  password: yup.string().required('Required'),\r\n});\r\n\r\nconst AuthForm = () => {\r\n  const dispatch = useDispatch();\r\n  const [authType, setAuthType] = useState('login');\r\n  const [showPass, setShowPass] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const classes = useAuthStyles(authType)();\r\n\r\n  const handleLogin = async (values, { setSubmitting }) => {\r\n    try {\r\n      setSubmitting(true);\r\n      await dispatch(loginUser(values));\r\n      dispatch(\r\n        notify(`Welcome, ${values.username}. You're logged in!`, 'success')\r\n      );\r\n    } catch (err) {\r\n      setSubmitting(false);\r\n      setError(getErrorMsg(err));\r\n    }\r\n  };\r\n\r\n  const handleSignup = async (values, { setSubmitting }) => {\r\n    try {\r\n      setSubmitting(true);\r\n      await dispatch(signupUser(values));\r\n      dispatch(\r\n        notify(\r\n          `Welcome, ${values.username}. You've been successfully registered.`,\r\n          'success'\r\n        )\r\n      );\r\n    } catch (err) {\r\n      setSubmitting(false);\r\n      setError(getErrorMsg(err));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.authWrapper}>\r\n        <Formik\r\n          validateOnChange={true}\r\n          initialValues={{ username: '', password: '' }}\r\n          onSubmit={authType === 'login' ? handleLogin : handleSignup}\r\n          validationSchema={\r\n            authType === 'login'\r\n              ? validationSchemaLogin\r\n              : validationSchemaSignup\r\n          }\r\n        >\r\n          {({ isSubmitting }) => (\r\n            <>\r\n              <Form className={classes.form}>\r\n                <Typography\r\n                  variant=\"h5\"\r\n                  color=\"secondary\"\r\n                  className={classes.formTitle}\r\n                >\r\n                  {authType === 'login'\r\n                    ? 'Login to your account'\r\n                    : 'Create a new account'}\r\n                </Typography>\r\n                <div className={classes.input}>\r\n                  <PersonIcon className={classes.inputIcon} color=\"primary\" />\r\n                  <TextInput\r\n                    name=\"username\"\r\n                    type=\"text\"\r\n                    placeholder=\"Enter username\"\r\n                    label=\"Username\"\r\n                    required\r\n                    fullWidth\r\n                  />\r\n                </div>\r\n                <div className={classes.input}>\r\n                  <LockIcon className={classes.inputIcon} color=\"primary\" />\r\n                  <TextInput\r\n                    name=\"password\"\r\n                    type={showPass ? 'text' : 'password'}\r\n                    placeholder=\"Enter password\"\r\n                    label=\"Password\"\r\n                    required\r\n                    fullWidth\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment position=\"end\">\r\n                          <IconButton\r\n                            onClick={() =>\r\n                              setShowPass((prevState) => !prevState)\r\n                            }\r\n                          >\r\n                            {showPass ? (\r\n                              <VisibilityOffIcon color=\"primary\" />\r\n                            ) : (\r\n                              <VisibilityIcon color=\"primary\" />\r\n                            )}\r\n                          </IconButton>\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n                </div>\r\n                <Button\r\n                  type=\"submit\"\r\n                  color=\"secondary\"\r\n                  variant=\"contained\"\r\n                  size=\"large\"\r\n                  startIcon={\r\n                    authType === 'login' ? <ExitToAppIcon /> : <PersonAddIcon />\r\n                  }\r\n                  className={classes.submitButton}\r\n                  disabled={isSubmitting}\r\n                >\r\n                  {authType === 'login'\r\n                    ? isSubmitting\r\n                      ? 'Logging In'\r\n                      : 'Login'\r\n                    : isSubmitting\r\n                    ? 'Signing Up'\r\n                    : 'Sign Up'}\r\n                </Button>\r\n              </Form>\r\n              <Divider\r\n                orientation=\"vertical\"\r\n                flexItem\r\n                className={classes.divider}\r\n              />\r\n              <div className={classes.sidePanel}>\r\n                <Typography\r\n                  variant=\"h6\"\r\n                  className={classes.switchText}\r\n                  color=\"primary\"\r\n                >\r\n                  {authType === 'login'\r\n                    ? `Don't have an account?`\r\n                    : 'Already have an account?'}\r\n                </Typography>\r\n                <Button\r\n                  onClick={() =>\r\n                    authType === 'login'\r\n                      ? setAuthType('signup')\r\n                      : setAuthType('login')\r\n                  }\r\n                  fullWidth\r\n                  size=\"large\"\r\n                  color=\"primary\"\r\n                  variant=\"outlined\"\r\n                  startIcon={\r\n                    authType === 'login' ? <PersonAddIcon /> : <ExitToAppIcon />\r\n                  }\r\n                  disabled={isSubmitting}\r\n                >\r\n                  {authType === 'login' ? 'Sign Up' : 'Login'}\r\n                </Button>\r\n              </div>\r\n            </>\r\n          )}\r\n        </Formik>\r\n      </div>\r\n      <div>\r\n        <AlertMessage\r\n          error={error}\r\n          severity=\"error\"\r\n          clearError={() => setError(null)}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AuthForm;\r\n"]},"metadata":{},"sourceType":"module"}