{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nived\\\\OneDrive\\\\Desktop\\\\reddish\\\\client\\\\src\\\\components\\\\UserPostCard.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toggleUpvote, toggleDownvote } from '../reducers/userPageReducer';\nimport { notify } from '../reducers/notificationReducer';\nimport { UpvoteButton, DownvoteButton } from './VoteButtons';\nimport TimeAgo from 'timeago-react';\nimport ReactHtmlParser from 'react-html-parser';\nimport { trimLink, prettifyLink, fixUrl } from '../utils/formatUrl';\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew';\nimport CommentIcon from '@material-ui/icons/Comment';\nimport getErrorMsg from '../utils/getErrorMsg';\nimport { Paper, Typography, Link, Button } from '@material-ui/core';\nimport { useUserPostCardStyles } from '../styles/muiStyles';\n\nconst UserPostCard = ({\n  post,\n  user,\n  isMobile\n}) => {\n  _s();\n\n  const classes = useUserPostCardStyles();\n  const dispatch = useDispatch();\n  const {\n    darkMode\n  } = useSelector(state => state);\n  const {\n    id,\n    title,\n    postType,\n    textSubmission,\n    linkSubmission,\n    imageSubmission,\n    subreddit,\n    author,\n    upvotedBy,\n    downvotedBy,\n    pointsCount,\n    commentCount,\n    createdAt,\n    updatedAt\n  } = post;\n  const isUpvoted = user && upvotedBy.includes(user.id);\n  const isDownvoted = user && downvotedBy.includes(user.id);\n\n  const handleUpvoteToggle = async () => {\n    try {\n      if (isUpvoted) {\n        const updatedUpvotedBy = upvotedBy.filter(u => u !== user.id);\n        dispatch(toggleUpvote(id, updatedUpvotedBy, downvotedBy));\n      } else {\n        const updatedUpvotedBy = [...upvotedBy, user.id];\n        const updatedDownvotedBy = downvotedBy.filter(d => d !== user.id);\n        dispatch(toggleUpvote(id, updatedUpvotedBy, updatedDownvotedBy));\n      }\n    } catch (err) {\n      dispatch(notify(getErrorMsg(err), 'error'));\n    }\n  };\n\n  const handleDownvoteToggle = async () => {\n    try {\n      if (isDownvoted) {\n        const updatedDownvotedBy = downvotedBy.filter(d => d !== user.id);\n        dispatch(toggleDownvote(id, updatedDownvotedBy, upvotedBy));\n      } else {\n        const updatedDownvotedBy = [...downvotedBy, user.id];\n        const updatedUpvotedBy = upvotedBy.filter(u => u !== user.id);\n        dispatch(toggleDownvote(id, updatedDownvotedBy, updatedUpvotedBy));\n      }\n    } catch (err) {\n      dispatch(notify(getErrorMsg(err), 'error'));\n    }\n  };\n\n  const formattedLink = postType === 'Link' && trimLink(prettifyLink(linkSubmission), 70);\n  const trimmedText = textSubmission && (textSubmission.length < 100 ? textSubmission : textSubmission.slice(0, 100).concat('....'));\n  return /*#__PURE__*/React.createElement(Paper, {\n    variant: \"outlined\",\n    className: classes.mainPaper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.votesWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(UpvoteButton, {\n    user: user,\n    body: post,\n    handleUpvote: handleUpvoteToggle,\n    size: isMobile ? 'small' : 'medium',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body1\",\n    style: {\n      color: isUpvoted ? '#FF8b60' : isDownvoted ? '#9494FF' : darkMode ? '#e4e4e4' : '#333',\n      fontWeight: 600\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, pointsCount), /*#__PURE__*/React.createElement(DownvoteButton, {\n    user: user,\n    body: post,\n    handleDownvote: handleDownvoteToggle,\n    size: isMobile ? 'small' : 'medium',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.postInfo,\n    component: RouterLink,\n    to: `/comments/${id}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"subtitle2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    component: RouterLink,\n    to: `/r/${subreddit.subredditName}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }\n  }, `r/${subreddit.subredditName} `), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"caption\",\n    className: classes.userAndDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }\n  }, \"\\u2022 Posted by\", /*#__PURE__*/React.createElement(Link, {\n    component: RouterLink,\n    to: `/u/${author.username}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }, ` u/${author.username} `), \"\\u2022 \", /*#__PURE__*/React.createElement(TimeAgo, {\n    datetime: new Date(createdAt),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 15\n    }\n  }), createdAt !== updatedAt && /*#__PURE__*/React.createElement(\"em\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 15\n    }\n  }, ' â€¢ edited', \" \", /*#__PURE__*/React.createElement(TimeAgo, {\n    datetime: new Date(updatedAt),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 31\n    }\n  })))), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    className: classes.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }\n  }, title), postType === 'Text' ? /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 11\n    }\n  }, ReactHtmlParser(trimmedText)) : postType === 'Image' ? /*#__PURE__*/React.createElement(\"a\", {\n    href: imageSubmission.imageLink,\n    alt: title,\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    className: classes.imagePost,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    alt: title,\n    src: imageSubmission.imageLink,\n    className: classes.image,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }\n  })) : /*#__PURE__*/React.createElement(Link, {\n    href: fixUrl(linkSubmission),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 11\n    }\n  }, formattedLink, \" \", /*#__PURE__*/React.createElement(OpenInNewIcon, {\n    fontSize: \"inherit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"primary\",\n    size: \"small\",\n    startIcon: /*#__PURE__*/React.createElement(CommentIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 24\n      }\n    }),\n    className: classes.commentsBtn,\n    component: RouterLink,\n    to: `/comments/${id}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 11\n    }\n  }, commentCount, \" Comments\"))));\n};\n\n_s(UserPostCard, \"oicmcgsUPKu2IBNj9+buxJLK7m8=\", false, function () {\n  return [useUserPostCardStyles, useDispatch, useSelector];\n});\n\n_c = UserPostCard;\nexport default UserPostCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserPostCard\");","map":{"version":3,"sources":["C:/Users/nived/OneDrive/Desktop/reddish/client/src/components/UserPostCard.js"],"names":["React","Link","RouterLink","useDispatch","useSelector","toggleUpvote","toggleDownvote","notify","UpvoteButton","DownvoteButton","TimeAgo","ReactHtmlParser","trimLink","prettifyLink","fixUrl","OpenInNewIcon","CommentIcon","getErrorMsg","Paper","Typography","Button","useUserPostCardStyles","UserPostCard","post","user","isMobile","classes","dispatch","darkMode","state","id","title","postType","textSubmission","linkSubmission","imageSubmission","subreddit","author","upvotedBy","downvotedBy","pointsCount","commentCount","createdAt","updatedAt","isUpvoted","includes","isDownvoted","handleUpvoteToggle","updatedUpvotedBy","filter","u","updatedDownvotedBy","d","err","handleDownvoteToggle","formattedLink","trimmedText","length","slice","concat","mainPaper","votesWrapper","color","fontWeight","postInfo","subredditName","userAndDate","username","Date","imageLink","imagePost","image","commentsBtn"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAI,IAAIC,UAAjB,QAAmC,kBAAnC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,6BAA7C;AACA,SAASC,MAAT,QAAuB,iCAAvB;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,eAA7C;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,QAAT,EAAmBC,YAAnB,EAAiCC,MAAjC,QAA+C,oBAA/C;AACA,OAAOC,aAAP,MAA0B,8BAA1B;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AAEA,SAASC,KAAT,EAAgBC,UAAhB,EAA4BlB,IAA5B,EAAkCmB,MAAlC,QAAgD,mBAAhD;AACA,SAASC,qBAAT,QAAsC,qBAAtC;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,IAAR;AAAcC,EAAAA;AAAd,CAAD,KAA8B;AAAA;;AACjD,QAAMC,OAAO,GAAGL,qBAAqB,EAArC;AACA,QAAMM,QAAQ,GAAGxB,WAAW,EAA5B;AACA,QAAM;AAAEyB,IAAAA;AAAF,MAAexB,WAAW,CAAEyB,KAAD,IAAWA,KAAZ,CAAhC;AAEA,QAAM;AACJC,IAAAA,EADI;AAEJC,IAAAA,KAFI;AAGJC,IAAAA,QAHI;AAIJC,IAAAA,cAJI;AAKJC,IAAAA,cALI;AAMJC,IAAAA,eANI;AAOJC,IAAAA,SAPI;AAQJC,IAAAA,MARI;AASJC,IAAAA,SATI;AAUJC,IAAAA,WAVI;AAWJC,IAAAA,WAXI;AAYJC,IAAAA,YAZI;AAaJC,IAAAA,SAbI;AAcJC,IAAAA;AAdI,MAeFpB,IAfJ;AAiBA,QAAMqB,SAAS,GAAGpB,IAAI,IAAIc,SAAS,CAACO,QAAV,CAAmBrB,IAAI,CAACM,EAAxB,CAA1B;AACA,QAAMgB,WAAW,GAAGtB,IAAI,IAAIe,WAAW,CAACM,QAAZ,CAAqBrB,IAAI,CAACM,EAA1B,CAA5B;;AAEA,QAAMiB,kBAAkB,GAAG,YAAY;AACrC,QAAI;AACF,UAAIH,SAAJ,EAAe;AACb,cAAMI,gBAAgB,GAAGV,SAAS,CAACW,MAAV,CAAkBC,CAAD,IAAOA,CAAC,KAAK1B,IAAI,CAACM,EAAnC,CAAzB;AACAH,QAAAA,QAAQ,CAACtB,YAAY,CAACyB,EAAD,EAAKkB,gBAAL,EAAuBT,WAAvB,CAAb,CAAR;AACD,OAHD,MAGO;AACL,cAAMS,gBAAgB,GAAG,CAAC,GAAGV,SAAJ,EAAed,IAAI,CAACM,EAApB,CAAzB;AACA,cAAMqB,kBAAkB,GAAGZ,WAAW,CAACU,MAAZ,CAAoBG,CAAD,IAAOA,CAAC,KAAK5B,IAAI,CAACM,EAArC,CAA3B;AACAH,QAAAA,QAAQ,CAACtB,YAAY,CAACyB,EAAD,EAAKkB,gBAAL,EAAuBG,kBAAvB,CAAb,CAAR;AACD;AACF,KATD,CASE,OAAOE,GAAP,EAAY;AACZ1B,MAAAA,QAAQ,CAACpB,MAAM,CAACU,WAAW,CAACoC,GAAD,CAAZ,EAAmB,OAAnB,CAAP,CAAR;AACD;AACF,GAbD;;AAeA,QAAMC,oBAAoB,GAAG,YAAY;AACvC,QAAI;AACF,UAAIR,WAAJ,EAAiB;AACf,cAAMK,kBAAkB,GAAGZ,WAAW,CAACU,MAAZ,CAAoBG,CAAD,IAAOA,CAAC,KAAK5B,IAAI,CAACM,EAArC,CAA3B;AACAH,QAAAA,QAAQ,CAACrB,cAAc,CAACwB,EAAD,EAAKqB,kBAAL,EAAyBb,SAAzB,CAAf,CAAR;AACD,OAHD,MAGO;AACL,cAAMa,kBAAkB,GAAG,CAAC,GAAGZ,WAAJ,EAAiBf,IAAI,CAACM,EAAtB,CAA3B;AACA,cAAMkB,gBAAgB,GAAGV,SAAS,CAACW,MAAV,CAAkBC,CAAD,IAAOA,CAAC,KAAK1B,IAAI,CAACM,EAAnC,CAAzB;AACAH,QAAAA,QAAQ,CAACrB,cAAc,CAACwB,EAAD,EAAKqB,kBAAL,EAAyBH,gBAAzB,CAAf,CAAR;AACD;AACF,KATD,CASE,OAAOK,GAAP,EAAY;AACZ1B,MAAAA,QAAQ,CAACpB,MAAM,CAACU,WAAW,CAACoC,GAAD,CAAZ,EAAmB,OAAnB,CAAP,CAAR;AACD;AACF,GAbD;;AAeA,QAAME,aAAa,GACjBvB,QAAQ,KAAK,MAAb,IAAuBpB,QAAQ,CAACC,YAAY,CAACqB,cAAD,CAAb,EAA+B,EAA/B,CADjC;AAGA,QAAMsB,WAAW,GACfvB,cAAc,KACbA,cAAc,CAACwB,MAAf,GAAwB,GAAxB,GACGxB,cADH,GAEGA,cAAc,CAACyB,KAAf,CAAqB,CAArB,EAAwB,GAAxB,EAA6BC,MAA7B,CAAoC,MAApC,CAHU,CADhB;AAMA,sBACE,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAC,UAAf;AAA0B,IAAA,SAAS,EAAEjC,OAAO,CAACkC,SAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAElC,OAAO,CAACmC,YAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AACE,IAAA,IAAI,EAAErC,IADR;AAEE,IAAA,IAAI,EAAED,IAFR;AAGE,IAAA,YAAY,EAAEwB,kBAHhB;AAIE,IAAA,IAAI,EAAEtB,QAAQ,GAAG,OAAH,GAAa,QAJ7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAOE,oBAAC,UAAD;AACE,IAAA,OAAO,EAAC,OADV;AAEE,IAAA,KAAK,EAAE;AACLqC,MAAAA,KAAK,EAAElB,SAAS,GACZ,SADY,GAEZE,WAAW,GACX,SADW,GAEXlB,QAAQ,GACR,SADQ,GAER,MAPC;AAQLmC,MAAAA,UAAU,EAAE;AARP,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAaGvB,WAbH,CAPF,eAsBE,oBAAC,cAAD;AACE,IAAA,IAAI,EAAEhB,IADR;AAEE,IAAA,IAAI,EAAED,IAFR;AAGE,IAAA,cAAc,EAAE+B,oBAHlB;AAIE,IAAA,IAAI,EAAE7B,QAAQ,GAAG,OAAH,GAAa,QAJ7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAtBF,CADF,eA8BE;AACE,IAAA,SAAS,EAAEC,OAAO,CAACsC,QADrB;AAEE,IAAA,SAAS,EAAE9D,UAFb;AAGE,IAAA,EAAE,EAAG,aAAY4B,EAAG,EAHtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKE,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,WAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAE5B,UAAjB;AAA6B,IAAA,EAAE,EAAG,MAAKkC,SAAS,CAAC6B,aAAc,EAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,KAAI7B,SAAS,CAAC6B,aAAc,GADhC,CADF,eAIE,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,SAApB;AAA8B,IAAA,SAAS,EAAEvC,OAAO,CAACwC,WAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAEE,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAEhE,UAAjB;AAA6B,IAAA,EAAE,EAAG,MAAKmC,MAAM,CAAC8B,QAAS,EAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAK9B,MAAM,CAAC8B,QAAS,GADzB,CAFF,0BAKI,oBAAC,OAAD;AAAS,IAAA,QAAQ,EAAE,IAAIC,IAAJ,CAAS1B,SAAT,CAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,EAMGA,SAAS,KAAKC,SAAd,iBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,WADH,oBACgB,oBAAC,OAAD;AAAS,IAAA,QAAQ,EAAE,IAAIyB,IAAJ,CAASzB,SAAT,CAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADhB,CAPJ,CAJF,CALF,eAsBE,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,IAApB;AAAyB,IAAA,SAAS,EAAEjB,OAAO,CAACK,KAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,KADH,CAtBF,EAyBGC,QAAQ,KAAK,MAAb,gBACC,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGrB,eAAe,CAAC6C,WAAD,CADlB,CADD,GAIGxB,QAAQ,KAAK,OAAb,gBACF;AACE,IAAA,IAAI,EAAEG,eAAe,CAACkC,SADxB;AAEE,IAAA,GAAG,EAAEtC,KAFP;AAGE,IAAA,MAAM,EAAC,QAHT;AAIE,IAAA,GAAG,EAAC,qBAJN;AAKE,IAAA,SAAS,EAAEL,OAAO,CAAC4C,SALrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAOE;AACE,IAAA,GAAG,EAAEvC,KADP;AAEE,IAAA,GAAG,EAAEI,eAAe,CAACkC,SAFvB;AAGE,IAAA,SAAS,EAAE3C,OAAO,CAAC6C,KAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CADE,gBAeF,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAEzD,MAAM,CAACoB,cAAD,CAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGqB,aADH,oBACkB,oBAAC,aAAD;AAAe,IAAA,QAAQ,EAAC,SAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADlB,CA5CJ,eAgDE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,KAAK,EAAC,SADR;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,SAAS,eAAE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHb;AAIE,IAAA,SAAS,EAAE7B,OAAO,CAAC8C,WAJrB;AAKE,IAAA,SAAS,EAAEtE,UALb;AAME,IAAA,EAAE,EAAG,aAAY4B,EAAG,EANtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQGW,YARH,cADF,CAhDF,CA9BF,CADF;AA8FD,CA9JD;;GAAMnB,Y;UACYD,qB,EACClB,W,EACIC,W;;;KAHjBkB,Y;AAgKN,eAAeA,YAAf","sourcesContent":["import React from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { toggleUpvote, toggleDownvote } from '../reducers/userPageReducer';\r\nimport { notify } from '../reducers/notificationReducer';\r\nimport { UpvoteButton, DownvoteButton } from './VoteButtons';\r\nimport TimeAgo from 'timeago-react';\r\nimport ReactHtmlParser from 'react-html-parser';\r\nimport { trimLink, prettifyLink, fixUrl } from '../utils/formatUrl';\r\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew';\r\nimport CommentIcon from '@material-ui/icons/Comment';\r\nimport getErrorMsg from '../utils/getErrorMsg';\r\n\r\nimport { Paper, Typography, Link, Button } from '@material-ui/core';\r\nimport { useUserPostCardStyles } from '../styles/muiStyles';\r\n\r\nconst UserPostCard = ({ post, user, isMobile }) => {\r\n  const classes = useUserPostCardStyles();\r\n  const dispatch = useDispatch();\r\n  const { darkMode } = useSelector((state) => state);\r\n\r\n  const {\r\n    id,\r\n    title,\r\n    postType,\r\n    textSubmission,\r\n    linkSubmission,\r\n    imageSubmission,\r\n    subreddit,\r\n    author,\r\n    upvotedBy,\r\n    downvotedBy,\r\n    pointsCount,\r\n    commentCount,\r\n    createdAt,\r\n    updatedAt,\r\n  } = post;\r\n\r\n  const isUpvoted = user && upvotedBy.includes(user.id);\r\n  const isDownvoted = user && downvotedBy.includes(user.id);\r\n\r\n  const handleUpvoteToggle = async () => {\r\n    try {\r\n      if (isUpvoted) {\r\n        const updatedUpvotedBy = upvotedBy.filter((u) => u !== user.id);\r\n        dispatch(toggleUpvote(id, updatedUpvotedBy, downvotedBy));\r\n      } else {\r\n        const updatedUpvotedBy = [...upvotedBy, user.id];\r\n        const updatedDownvotedBy = downvotedBy.filter((d) => d !== user.id);\r\n        dispatch(toggleUpvote(id, updatedUpvotedBy, updatedDownvotedBy));\r\n      }\r\n    } catch (err) {\r\n      dispatch(notify(getErrorMsg(err), 'error'));\r\n    }\r\n  };\r\n\r\n  const handleDownvoteToggle = async () => {\r\n    try {\r\n      if (isDownvoted) {\r\n        const updatedDownvotedBy = downvotedBy.filter((d) => d !== user.id);\r\n        dispatch(toggleDownvote(id, updatedDownvotedBy, upvotedBy));\r\n      } else {\r\n        const updatedDownvotedBy = [...downvotedBy, user.id];\r\n        const updatedUpvotedBy = upvotedBy.filter((u) => u !== user.id);\r\n        dispatch(toggleDownvote(id, updatedDownvotedBy, updatedUpvotedBy));\r\n      }\r\n    } catch (err) {\r\n      dispatch(notify(getErrorMsg(err), 'error'));\r\n    }\r\n  };\r\n\r\n  const formattedLink =\r\n    postType === 'Link' && trimLink(prettifyLink(linkSubmission), 70);\r\n\r\n  const trimmedText =\r\n    textSubmission &&\r\n    (textSubmission.length < 100\r\n      ? textSubmission\r\n      : textSubmission.slice(0, 100).concat('....'));\r\n\r\n  return (\r\n    <Paper variant=\"outlined\" className={classes.mainPaper}>\r\n      <div className={classes.votesWrapper}>\r\n        <UpvoteButton\r\n          user={user}\r\n          body={post}\r\n          handleUpvote={handleUpvoteToggle}\r\n          size={isMobile ? 'small' : 'medium'}\r\n        />\r\n        <Typography\r\n          variant=\"body1\"\r\n          style={{\r\n            color: isUpvoted\r\n              ? '#FF8b60'\r\n              : isDownvoted\r\n              ? '#9494FF'\r\n              : darkMode\r\n              ? '#e4e4e4'\r\n              : '#333',\r\n            fontWeight: 600,\r\n          }}\r\n        >\r\n          {pointsCount}\r\n        </Typography>\r\n        <DownvoteButton\r\n          user={user}\r\n          body={post}\r\n          handleDownvote={handleDownvoteToggle}\r\n          size={isMobile ? 'small' : 'medium'}\r\n        />\r\n      </div>\r\n      <div\r\n        className={classes.postInfo}\r\n        component={RouterLink}\r\n        to={`/comments/${id}`}\r\n      >\r\n        <Typography variant=\"subtitle2\">\r\n          <Link component={RouterLink} to={`/r/${subreddit.subredditName}`}>\r\n            {`r/${subreddit.subredditName} `}\r\n          </Link>\r\n          <Typography variant=\"caption\" className={classes.userAndDate}>\r\n            â€¢ Posted by\r\n            <Link component={RouterLink} to={`/u/${author.username}`}>\r\n              {` u/${author.username} `}\r\n            </Link>\r\n            â€¢ <TimeAgo datetime={new Date(createdAt)} />\r\n            {createdAt !== updatedAt && (\r\n              <em>\r\n                {' â€¢ edited'} <TimeAgo datetime={new Date(updatedAt)} />\r\n              </em>\r\n            )}\r\n          </Typography>\r\n        </Typography>\r\n        <Typography variant=\"h5\" className={classes.title}>\r\n          {title}\r\n        </Typography>\r\n        {postType === 'Text' ? (\r\n          <Typography variant=\"body1\">\r\n            {ReactHtmlParser(trimmedText)}\r\n          </Typography>\r\n        ) : postType === 'Image' ? (\r\n          <a\r\n            href={imageSubmission.imageLink}\r\n            alt={title}\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            className={classes.imagePost}\r\n          >\r\n            <img\r\n              alt={title}\r\n              src={imageSubmission.imageLink}\r\n              className={classes.image}\r\n            />\r\n          </a>\r\n        ) : (\r\n          <Link href={fixUrl(linkSubmission)}>\r\n            {formattedLink} <OpenInNewIcon fontSize=\"inherit\" />\r\n          </Link>\r\n        )}\r\n        <div>\r\n          <Button\r\n            color=\"primary\"\r\n            size=\"small\"\r\n            startIcon={<CommentIcon />}\r\n            className={classes.commentsBtn}\r\n            component={RouterLink}\r\n            to={`/comments/${id}`}\r\n          >\r\n            {commentCount} Comments\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default UserPostCard;\r\n"]},"metadata":{},"sourceType":"module"}