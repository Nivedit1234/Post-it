{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nived\\\\OneDrive\\\\Desktop\\\\pt\\\\Post-it\\\\client\\\\src\\\\components\\\\TopSubsPanel.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { toggleSubscribe } from '../reducers/subReducer';\nimport { notify } from '../reducers/notificationReducer';\nimport SubFormModal from './SubFormModal';\nimport LoadingSpinner from './LoadingSpinner';\nimport getErrorMsg from '../utils/getErrorMsg';\nimport storageService from '../utils/localStorage';\nimport { Paper, Typography, useMediaQuery, Link, Button } from '@material-ui/core';\nimport { useSubPanelStyles } from '../styles/muiStyles';\nimport { useTheme } from '@material-ui/core/styles';\nimport AddIcon from '@material-ui/icons/Add';\nimport CheckIcon from '@material-ui/icons/Check';\n\nconst TopSubsPanel = () => {\n  _s();\n\n  const {\n    subs,\n    user\n  } = useSelector(state => state);\n  const dispatch = useDispatch();\n  const classes = useSubPanelStyles();\n  const theme = useTheme();\n  const isNotDesktop = useMediaQuery(theme.breakpoints.down('md'));\n\n  if (isNotDesktop) {\n    return null;\n  }\n\n  const loggedUser = storageService.loadUser() || user;\n  const loadingSubs = !subs || !subs.topSubs;\n\n  const isSubscribed = (subscribedBy, user) => {\n    return subscribedBy.includes(user.id);\n  };\n\n  const handleJoinSub = async (id, subscribedBy, subredditName) => {\n    try {\n      let updatedSubscribedBy;\n\n      if (subscribedBy.includes(user.id)) {\n        updatedSubscribedBy = subscribedBy.filter(s => s !== user.id);\n      } else {\n        updatedSubscribedBy = [...subscribedBy, user.id];\n      }\n\n      dispatch(toggleSubscribe(id, updatedSubscribedBy));\n      let message = subscribedBy.includes(user.id) ? `Unsubscribed from r/${subredditName}` : `Subscribed to r/${subredditName}!`;\n      dispatch(notify(message, 'success'));\n    } catch (err) {\n      dispatch(notify(getErrorMsg(err), 'error'));\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Paper, {\n    variant: \"outlined\",\n    className: classes.mainPaper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Paper, {\n    variant: \"outlined\",\n    className: classes.listPaper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    color: \"secondary\",\n    className: classes.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, \"Top Communities\"), loadingSubs ? /*#__PURE__*/React.createElement(LoadingSpinner, {\n    text: \"Fetching subs data...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }) : subs.topSubs.map((s, i) => /*#__PURE__*/React.createElement(\"div\", {\n    key: s.id,\n    className: classes.listWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body2\",\n    className: classes.listItem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 15\n    }\n  }, `${i + 1}. `, /*#__PURE__*/React.createElement(Link, {\n    component: RouterLink,\n    to: `/r/${s.subredditName}`,\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }\n  }, \"r/\", s.subredditName), ` - ${s.subscriberCount} members `), loggedUser && /*#__PURE__*/React.createElement(Button, {\n    variant: \"outlined\",\n    color: \"primary\",\n    size: \"small\",\n    startIcon: isSubscribed(s.subscribedBy, user) ? /*#__PURE__*/React.createElement(CheckIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 23\n      }\n    }) : /*#__PURE__*/React.createElement(AddIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 23\n      }\n    }),\n    onClick: () => handleJoinSub(s.id, s.subscribedBy, s.subredditName),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }\n  }, isSubscribed(s.subscribedBy, user) ? 'Joined' : 'Join')))), loggedUser && /*#__PURE__*/React.createElement(SubFormModal, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 22\n    }\n  }));\n};\n\n_s(TopSubsPanel, \"oEHjG2afa/VAGyAdtpFLZ7zdSXo=\", false, function () {\n  return [useSelector, useDispatch, useSubPanelStyles, useTheme, useMediaQuery];\n});\n\n_c = TopSubsPanel;\nexport default TopSubsPanel;\n\nvar _c;\n\n$RefreshReg$(_c, \"TopSubsPanel\");","map":{"version":3,"sources":["C:/Users/nived/OneDrive/Desktop/pt/Post-it/client/src/components/TopSubsPanel.js"],"names":["React","Link","RouterLink","useSelector","useDispatch","toggleSubscribe","notify","SubFormModal","LoadingSpinner","getErrorMsg","storageService","Paper","Typography","useMediaQuery","Button","useSubPanelStyles","useTheme","AddIcon","CheckIcon","TopSubsPanel","subs","user","state","dispatch","classes","theme","isNotDesktop","breakpoints","down","loggedUser","loadUser","loadingSubs","topSubs","isSubscribed","subscribedBy","includes","id","handleJoinSub","subredditName","updatedSubscribedBy","filter","s","message","err","mainPaper","listPaper","title","map","i","listWrapper","listItem","subscriberCount"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { toggleSubscribe } from '../reducers/subReducer';\r\nimport { notify } from '../reducers/notificationReducer';\r\nimport SubFormModal from './SubFormModal';\r\nimport LoadingSpinner from './LoadingSpinner';\r\nimport getErrorMsg from '../utils/getErrorMsg';\r\nimport storageService from '../utils/localStorage';\r\n\r\nimport {\r\n  Paper,\r\n  Typography,\r\n  useMediaQuery,\r\n  Link,\r\n  Button,\r\n} from '@material-ui/core';\r\nimport { useSubPanelStyles } from '../styles/muiStyles';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\n\r\nconst TopSubsPanel = () => {\r\n  const { subs, user } = useSelector((state) => state);\r\n  const dispatch = useDispatch();\r\n  const classes = useSubPanelStyles();\r\n  const theme = useTheme();\r\n  const isNotDesktop = useMediaQuery(theme.breakpoints.down('md'));\r\n\r\n  if (isNotDesktop) {\r\n    return null;\r\n  }\r\n\r\n  const loggedUser = storageService.loadUser() || user;\r\n\r\n  const loadingSubs = !subs || !subs.topSubs;\r\n\r\n  const isSubscribed = (subscribedBy, user) => {\r\n    return subscribedBy.includes(user.id);\r\n  };\r\n\r\n  const handleJoinSub = async (id, subscribedBy, subredditName) => {\r\n    try {\r\n      let updatedSubscribedBy;\r\n\r\n      if (subscribedBy.includes(user.id)) {\r\n        updatedSubscribedBy = subscribedBy.filter((s) => s !== user.id);\r\n      } else {\r\n        updatedSubscribedBy = [...subscribedBy, user.id];\r\n      }\r\n      dispatch(toggleSubscribe(id, updatedSubscribedBy));\r\n\r\n      let message = subscribedBy.includes(user.id)\r\n        ? `Unsubscribed from r/${subredditName}`\r\n        : `Subscribed to r/${subredditName}!`;\r\n      dispatch(notify(message, 'success'));\r\n    } catch (err) {\r\n      dispatch(notify(getErrorMsg(err), 'error'));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Paper variant='outlined' className={classes.mainPaper}>\r\n      <Paper variant='outlined' className={classes.listPaper}>\r\n        <Typography variant='h5' color='secondary' className={classes.title}>\r\n          Top Communities\r\n        </Typography>\r\n        {loadingSubs ? (\r\n          <LoadingSpinner text='Fetching subs data...' />\r\n        ) : (\r\n          subs.topSubs.map((s, i) => (\r\n            <div key={s.id} className={classes.listWrapper}>\r\n              <Typography variant='body2' className={classes.listItem}>\r\n                {`${i + 1}. `}\r\n                <Link\r\n                  component={RouterLink}\r\n                  to={`/r/${s.subredditName}`}\r\n                  color='primary'\r\n                >\r\n                  r/{s.subredditName}\r\n                </Link>\r\n                {` - ${s.subscriberCount} members `}\r\n              </Typography>\r\n              {loggedUser && (\r\n                <Button\r\n                  variant='outlined'\r\n                  color='primary'\r\n                  size='small'\r\n                  startIcon={\r\n                    isSubscribed(s.subscribedBy, user) ? (\r\n                      <CheckIcon />\r\n                    ) : (\r\n                      <AddIcon />\r\n                    )\r\n                  }\r\n                  onClick={() =>\r\n                    handleJoinSub(s.id, s.subscribedBy, s.subredditName)\r\n                  }\r\n                >\r\n                  {isSubscribed(s.subscribedBy, user) ? 'Joined' : 'Join'}\r\n                </Button>\r\n              )}\r\n            </div>\r\n          ))\r\n        )}\r\n      </Paper>\r\n      {loggedUser && <SubFormModal />}\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default TopSubsPanel;\r\n"]},"metadata":{},"sourceType":"module"}